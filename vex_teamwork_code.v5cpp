{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n \n\n// device configuration\n\n// brain Brain;\n\ncontroller Controller1;\n\n \n\nmotor frontleft = motor(PORT2, ratio6_1, false);\n\nmotor frontright = motor(PORT9, ratio6_1, true);\n\nmotor backleft = motor(PORT12, ratio6_1, false);\n\nmotor backright = motor(PORT20, ratio6_1, true);\n \n\nmotor intakebottom(PORT1, ratio6_1, true);\n\nmotor intakemiddle(PORT10, ratio6_1, false);\n\nmotor storage(PORT3, ratio6_1, false);\n\nmotor intaketop(PORT11, ratio6_1, true);\n\n \n\ndigital_out scraper(Brain.ThreeWirePort.A);\n\n\n\n \n\n// Intake/storage mode enums\n\nenum Mode { NONE, A_MODE, B_MODE, R1_MODE, R2_MODE, L1_MODE };\n\nMode activeMode = NONE;\n\n \n\nenum StorageMode { STORAGE_NONE, STORAGE_FORWARD, STORAGE_REVERSE };\n\nStorageMode storageMode = STORAGE_NONE;\n\n \n\n// previous button states (used later)\n\nbool preva = false, prevb = false;\n\nbool prevr1 = false, prevr2 = false, prevl1 = false;\n\nbool prevx = false, prevy = false;\n\nvoid DriveForward(int dist) {\n  frontleft.spinFor(forward, dist * 360, degrees, false);\n  frontright.spinFor(forward, dist * 360, degrees, false);\n  backleft.spinFor(forward, dist * 360, degrees, false);\n  backright.spinFor(forward, dist * 360, degrees, false);\n}\nvoid Turn(int degree) {\n  frontleft.spinFor();\n  frontright.spinFor();\n  backleft.spinFor();\n  backright.spinFor();\n}\nint main() {\n  intakebottom.setStopping(brake);\n  intakemiddle.setStopping(brake);\n  intaketop.setStopping(brake);\n  intakebottom.setVelocity(100, percent);\n  intakemiddle.setVelocity(100, percent);\n  intaketop.setVelocity(100, percent);\n  frontleft.setVelocity(100, percent);\n  frontright.setVelocity(100, percent);\n  backleft.setVelocity(100, percent);\n  backright.setVelocity(100, percent);\n  //autonomous code\n  while (!Controller1.ButtonUp.pressing()) {\n    // if (Controller1.ButtonUp.pressing()) {\n    Brain.Timer.clear();\n      // break;\n    \n  }\n  // go forward 2-ish feet and intake blocks\n  // int autonForward = 720;\n  DriveForward(2);\n  intakebottom.spin(forward);\n  intakemiddle.spin(forward);\n  intaketop.spin(forward);\n  //turn about 30 degrees\n\n  Turn(30);\n  pistonLeft.set(true);\n  pistonRight.set(true);\n  DriveForward(2.236);\n\n  wait(2, seconds);\n  intakebottom.stop();\n  intakemiddle.stop();\n  intaketop.stop();\n  DriveForward(-0.4);\n  intakebottom.spin(forward);\n  intakemiddle.spin(forward);\n  intaketop.spin(reverse);\n  Turn(130);\n  DriveForward(1.7);\n  storage.spin(forward);\n  while (true) {\n    if (Brain.Timer.time(seconds) > 14.5) {\n      intakebottom.stop();\n      intakemiddle.stop();\n      intaketop.stop();\n      storage.stop();\n      break;\n    }\n  }\n\n  //autonomous over\n  frontleft.spin(forward);\n  frontright.spin(forward);\n  backleft.spin(forward);\n  backright.spin(forward);\n  //driver control starts\n  while (true) {\n\n    // drivetrain control\n    // double speed = 1;\n    // int driveSpeed = speed * Controller1.Axis3.position(percent);\n\n    // int turnSpeed = speed * Controller1.Axis1.position(percent);\n\n\n    // frontleft.setVelocity(driveSpeed + turnSpeed, percent);\n    // backleft.setVelocity(driveSpeed + turnSpeed, percent);\n    // frontright.setVelocity(driveSpeed - turnSpeed, percent);\n    // backright.setVelocity(driveSpeed - turnSpeed, percent);\n\n \n    // frontleft.spin(forward);\n    // backleft.spin(forward);\n    // frontright.spin(forward);\n    // backright.spin(forward);\n\n    frontleft.setVelocity(Controller1.Axis3.position()+Controller1.Axis1.position(), percent);\n    frontright.setVelocity(Controller1.Axis3.position()-Controller1.Axis1.position(), percent);\n    backleft.setVelocity(Controller1.Axis3.position()+Controller1.Axis1.position(), percent);\n    backright.setVelocity(Controller1.Axis3.position()-Controller1.Axis1.position(), percent);\n\n    // current button states, if they are being pressed.\n    bool curra = Controller1.ButtonA.pressing();\n    bool currb = Controller1.ButtonB.pressing();\n    bool currr1 = Controller1.ButtonR1.pressing();\n    bool currr2 = Controller1.ButtonR2.pressing();\n    bool currl1 = Controller1.ButtonL1.pressing();\n    bool currx = Controller1.ButtonX.pressing();\n    bool curry = Controller1.ButtonY.pressing();\n\n \n\n    // intake toggle logic\n    ////long goal scoring\n    if ((curra == true) && (preva == false)) {\n      activeMode = (activeMode == A_MODE) ? NONE : A_MODE;\n      if (activeMode == A_MODE) {\n        intakebottom.spin(forward, 100, percent);\n        intaketop.spin(reverse, 100, percent);\n        intakemiddle.spin(forward, 100, percent);\n        storage.spin(forward, 100, percent);\n      }\n      else {\n        intakebottom.stop();\n        intakemiddle.stop();\n        intaketop.stop();\n        storage.stop();\n      }\n    }\n    ////upper center goal scoring \n    else if (currb && !prevb) {\n      activeMode = (activeMode == B_MODE) ? NONE : B_MODE;\n        if (activeMode == B_MODE) {\n        intakebottom.spin(forward, 100, percent);\n        // intaketop.spin(reverse, 100, percent);\n        intakemiddle.spin(reverse, 100, percent);\n        storage.spin(forward, 100, percent);\n      }\n      else {\n        intakebottom.stop();\n        intakemiddle.stop();\n        // intaketop.stop();\n        storage.stop();\n      }\n    }\n    ////into storage intake\n    else if (currr1 && !prevr1) {\n      activeMode = (activeMode == R1_MODE) ? NONE : R1_MODE;\n      if (activeMode == R1_MODE) {\n        intaketop.spin(forward, 100, percent);\n        intakebottom.spin(forward, 100, percent);\n        intakemiddle.spin(forward, 100, percent);\n      }\n      else {\n        intakebottom.stop();\n        intakemiddle.stop();\n        intaketop.stop();\n      }\n    } \n    ////lower center goal scoring\n    else if (currr2 && !prevr2) {\n      activeMode = (activeMode == R2_MODE) ? NONE : R2_MODE;\n      if (activeMode == R2_MODE) {\n        storage.spin(forward, 100, percent);\n        intakebottom.spin(reverse, 100, percent);\n        intakemiddle.spin(reverse, 100, percent);\n        intaketop.spin(reverse, 100, percent);\n      }\n      else {\n        intakebottom.stop();\n        storage.stop();\n        intakemiddle.stop();\n        intaketop.stop();\n      }\n    } \n    // use this for anything else that i might have missed\n    // else if (currl1 && !prevl1) {\n      // activeMode = (activeMode == L1_MODE) ? NONE : L1_MODE;\n      // if (L1_MODE) {\n        // storage.spin(forward, 100, percent);\n        // intakebottom.spin(reverse, 100, percent);\n        // intakemiddle.spin(reverse, 100, percent);\n      // }\n    // }\n\n \n\n    // storage toggle logic (will run if not overridden by intake logic)\n    if (currx && !prevx) {\n      storageMode = (storageMode == STORAGE_FORWARD) ? STORAGE_NONE : STORAGE_FORWARD;\n    }\n\n \n\n    // update previous button states\n    preva = curra;\n    prevb = currb;\n    prevr1 = currr1;\n    prevr2 = currr2;\n    prevl1 = currl1;\n    prevx = currx;\n    prevy = curry;\n\n \n\n    // // control intake motors\n\n    // switch (activeMode) {\n    //   case A_MODE:\n    //     intakebottom.spin(forward, 100, percent);\n    //     intaketop.spin(forward, 100, percent);\n    //     intakemiddle.spin(reverse, 100, percent);\n    //     break;\n    //   case B_MODE:\n    //     intakebottom.spin(reverse, 100, percent);\n    //     intaketop.spin(reverse, 100, percent);\n    //     intakemiddle.spin(forward, 100, percent);\n    //     break;\n    //   case R1_MODE:\n    //     storage.spin(forward, 100, percent);\n    //     intakebottom.spin(forward, 100, percent);\n    //     intakemiddle.spin(forward, 100, percent);\n    //     break;\n    //   case R2_MODE:\n    //     storage.spin(forward, 100, percent);\n    //     intakebottom.spin(forward, 100, percent);\n    //     intakemiddle.spin(reverse, 100, percent);\n    //     intaketop.spin(reverse, 100, percent);\n    //     break;\n    //   case L1_MODE:\n    //     storage.spin(forward, 100, percent);\n    //     intakebottom.spin(reverse, 100, percent);\n    //     intakemiddle.spin(reverse, 100, percent);\n    //     break;\n    //   case NONE:\n    //     //if no buttons are pressed, then the motors will continue spinning, because otherwise yuou would \n    //     //have to hold down all of the buttons to do stuff.\n\n    //     break;\n\n    // }\n    // if (Controller1.ButtonRight.pressing()) {\n    //   Brain.programStop();\n    // }\n \n\n    // storage control motor code (will run if not overridden by intake)\n    if (activeMode == NONE) {\n      switch (storageMode) {\n        case STORAGE_FORWARD:\n          storage.spin(forward, 100, percent);\n          break;\n        case STORAGE_REVERSE:\n          storage.spin(reverse, 100, percent);\n          break;\n        case STORAGE_NONE:\n          storage.stop(brake);\n          break;\n      }\n    }\n\n \n\n    // pneumatic control\n    if (Controller1.ButtonL1.pressing()) {\n      scraper.set(true);\n    } else if (Controller1.ButtonL2.pressing()) {\n      scraper.set(false);\n    }\n\n    wait(20, msec);\n  }\n\n}\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n","textLanguage":"cpp","robotConfig":[],"slot":7,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.61.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"aiVisionSettings":{"colors":[],"codes":[],"tags":true,"AIObjects":true,"AIObjectModel":[],"aiModelDropDownValue":null}}