{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n#include \"cmath\"  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n \n\n// device configuration\n\n// brain Brain;\n\ncontroller Controller1;\n\nmotor frontleft = motor(PORT2, ratio6_1, true);\nmotor frontright = motor(PORT9, ratio6_1, false);\nmotor backleft = motor(PORT12, ratio6_1, false);\nmotor backright = motor(PORT20, ratio6_1, true);\n \n\nmotor intakebottom(PORT1, ratio6_1, true);\nmotor intakemiddle(PORT10, ratio6_1, false);\nmotor intaketop(PORT11, ratio6_1, true);\n\nmotor storage(PORT3, ratio6_1, false);\n\ndigital_out loaderthing(Brain.ThreeWirePort.A);\n\ndistance distancefront = distance(PORT14);\n\n// Intake/storage mode enums\n\nenum Mode { NONE, A_MODE, B_MODE, R1_MODE, R2_MODE, DOWN_MODE, RIGHT_MODE};\n\nMode activeMode = NONE;\n\n\n\n// previous button states (used later)\n\nbool preva = false, prevb = false;\n\nbool prevr1 = false, prevr2 = false;\n\nbool prevdown = false, prevy = false;\n\nbool prevright = false;\n\nint speedchanger = 10;\n\nvoid SetAllDriveVelocity(int percentVelocity) {\n  frontleft.setVelocity(percentVelocity, percent);\n  frontright.setVelocity(percentVelocity, percent);\n  backleft.setVelocity(percentVelocity, percent);\n  backright.setVelocity(percentVelocity, percent);\n}\nvoid SpinDriveForwards(double dist) {\n  frontleft.spinFor(forward, dist * 343.8, degrees, false);\n  frontright.spinFor(forward, dist * 343.8, degrees, false);\n  backleft.spinFor(forward, dist * 343.8, degrees, false);\n  backright.spinFor(forward, dist * 343.8, degrees, true);\n}\nvoid StopDrive() {\n  frontleft.stop();\n  frontright.stop();\n  backleft.stop();\n  backright.stop();\n}\nvoid DriveForwards(double dist/*, int slowSpeedPercent, double distSpeedChange*/) {\n  // frontleft.stop();\n  // frontright.stop();\n  // backleft.stop();\n  // backright.stop();\n  // wait(300, msec);\n  // int fullSpeedDist = dist - distSpeedChange;\n  // SetAllDriveVelocity(speedchanger);\n  // SpinDriveForwards(fullSpeedDist);\n  // SetAllDriveVelocity(slowSpeedPercent*speedchanger/100);\n  // SpinDriveForwards(distSpeedChange);\n\n  // frontleft.stop();\n  // frontright.stop();\n  // backleft.stop();\n  // backright.stop();\n  double kp = 0.15;\n  double ki = 0.04;\n  double kd= 0.09;\n  double beginningtime = Brain.timer(msec);\n  double totaltime = 0;\n  double targetdegrees = dist * 343.8;\n\n\n  frontleft.setPosition(0, degrees);\n  frontright.setPosition(0, degrees);\n  backleft.setPosition(0, degrees);\n  backright.setPosition(0, degrees);\n\n\n  double error = 0;\n  double preverror = 0;\n  double integral = 0;\n  double derivative = 0;\n  double output = 0;\n\n\n  double prevtime = Brain.timer(msec);\n\n  while (true) {\n    double currenttime = Brain.timer(msec);\n    double timechange = (currenttime - prevtime)/1000; \n\n    double avgpos = (\n      frontleft.position(degrees) +\n      frontright.position(degrees) +\n      backleft.position(degrees) +\n      backright.position(degrees)\n    ) / 4.0;\n\n    error = targetdegrees - avgpos;\n    integral += error * timechange;\n    derivative = (error - preverror) / timechange;\n\n    output = (kp * error) + (ki * integral) + (kd* derivative);\n\n    if (output > 100) output = 100;\n    if (output < -100) output = -100;\n\n    frontleft.spin(forward, output, percent);\n    frontright.spin(forward, output, percent);\n    backleft.spin(forward, output, percent);\n    backright.spin(forward, output, percent);\n\n    preverror = error;\n    prevtime = currenttime;\n\n    if (fabs(error) < 20) break;\n    totaltime = Brain.timer(seconds) - beginningtime;\n    if (totaltime > 5.0) {\n      break;\n    }\n    wait(20, msec);\n  }\n\n  StopDrive();\n}\nvoid Turn(double degree/*           left is - and right is +           */) {\n  StopDrive();\n  wait(300, msec);\n  SetAllDriveVelocity(50);\n  frontleft.spinFor(forward, degree * 2.7, degrees, false);\n  frontright.spinFor(reverse, degree * 2.7, degrees, false);\n  backleft.spinFor(forward, degree * 2.7, degrees, false);\n  backright.spinFor(reverse, degree * 2.7, degrees, true);\n  SetAllDriveVelocity(100);\n  StopDrive();\n}\nint main() {\n  intakebottom.setStopping(brake);\n  intakemiddle.setStopping(brake);\n  intaketop.setStopping(brake);\n\n  intakebottom.setVelocity(100, percent);\n  intakemiddle.setVelocity(100, percent);\n  intaketop.setVelocity(100, percent);\n\n  frontleft.setVelocity(100, percent);\n  frontright.setVelocity(100, percent);\n  backleft.setVelocity(100, percent);\n  backright.setVelocity(100, percent);\n\n  frontleft.setStopping(hold);\n  frontright.setStopping(hold);\n  backleft.setStopping(hold);\n  backright.setStopping(hold);\n  //autonomous code\n  while (!Controller1.ButtonUp.pressing()) {\n    if (Controller1.ButtonUp.pressing()) {\n    Brain.Timer.clear();\n      break;\n    }\n  }\n  Brain.Screen.setFont(mono12);\n  DriveForwards(2.6);\n  wait(0.1, seconds);\n  Turn(90.0);\n  //intaking from loader\n  loaderthing.set(true);\n  intakebottom.spin(forward);\n  intakemiddle.spin(forward);\n  intaketop.spin(forward);\n  wait(500, msec);\n  SpinDriveForwards(0.8);\n  DriveForwards(-0.4);\n  loaderthing.set(false);\n  wait(0.1, seconds);\n  //going to intake some blocks\n  Turn(125.0);\n  wait(0.1, seconds);\n  DriveForwards(2.3);\n  wait(0.1, seconds);\n  //going to score\n  Turn(-165.0);\n  intakebottom.stop();\n  intakemiddle.stop();\n  intaketop.stop();\n  storage.stop();\n  wait(0.1, seconds);\n  DriveForwards(2);\n  wait(0.1, seconds);\n  Turn(-110.0);\n  wait(0.1, seconds);\n  DriveForwards(2.0);\n\n  wait(0.2, seconds);\n  intakebottom.spin(forward);\n  intakemiddle.spin(forward);\n  intaketop.spin(reverse);\n  storage.spin(forward);\n  wait(1, seconds);\n  storage.spin(reverse);\n  wait(0.7, seconds);\n  storage.spin(forward);\n  wait(1, seconds);\n  storage.spin(reverse);\n  wait(0.7, seconds);\n  storage.spin(forward);\n  while (true) {\n    if (Brain.Timer.time(seconds) > 6.5) {\n      intakebottom.stop();\n      intakemiddle.stop();\n      intaketop.stop();\n      storage.stop();\n      break;\n    }\n  }\n  //autonomous over\n  frontleft.setStopping(coast);\n  frontright.setStopping(coast);\n  backleft.setStopping(coast);\n  backright.setStopping(coast);\n  frontleft.spin(forward);\n  frontright.spin(forward);\n  backleft.spin(forward);\n  backright.spin(forward);\n  //driver control starts\n  while (true) {\n\n\n    Brain.Screen.clearScreen();\n    frontleft.setVelocity(Controller1.Axis3.position()+Controller1.Axis1.position(), percent);\n    frontright.setVelocity(Controller1.Axis3.position()-Controller1.Axis1.position(), percent);\n    backleft.setVelocity(Controller1.Axis3.position()+Controller1.Axis1.position(), percent);\n    backright.setVelocity(Controller1.Axis3.position()-Controller1.Axis1.position(), percent);\n    Brain.Screen.print(\"Frontleft %f\", frontleft.position(degrees));\n\n    Brain.Screen.print(\"Frontright %f\", frontright.position(degrees));\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"backleft %f\", backleft.position(degrees));\n\n    Brain.Screen.print(\"backright %f\", backright.position(degrees));\n    Brain.Screen.newLine();\n    // current button states, if they are being pressed.\n    bool curra = Controller1.ButtonA.pressing();\n    bool currb = Controller1.ButtonB.pressing();\n    bool currr1 = Controller1.ButtonR1.pressing();\n    bool currr2 = Controller1.ButtonR2.pressing();\n    // bool currl1 = Controller1.ButtonL1.pressing();\n    // bool currx = Controller1.ButtonX.pressing();\n    bool curry = Controller1.ButtonY.pressing();\n    bool currdown = Controller1.ButtonDown.pressing();\n    bool currright = Controller1.ButtonRight.pressing();\n \n\n    // intake toggle logic\n    ////long goal scoring\n    if ((curra == true) && (preva == false)) {\n      activeMode = (activeMode == A_MODE) ? NONE : A_MODE;\n      if (activeMode == A_MODE) {\n        intakebottom.spin(forward, 100, percent);\n        intaketop.spin(reverse, 100, percent);\n        intakemiddle.spin(forward, 100, percent);\n        storage.spin(forward, 100, percent);\n      }\n      else {\n        intakebottom.stop();\n        intakemiddle.stop();\n        intaketop.stop();\n        storage.stop();\n      }\n    }\n    ////upper center goal scoring \n    if ((currb == true) && (prevb == false)) {\n      activeMode = (activeMode == B_MODE) ? NONE : B_MODE;\n        if (activeMode == B_MODE) {\n        intakebottom.spin(forward, 100, percent);\n        // intaketop.spin(reverse, 100, percent);\n        intakemiddle.spin(reverse, 100, percent);\n        storage.spin(forward, 100, percent);\n        intaketop.stop();\n      }\n      else {\n        intakebottom.stop();\n        intakemiddle.stop();\n        // intaketop.stop();\n        storage.stop();\n      }\n    }\n    ////into storage intake\n    if ((currr1 == true) && (prevr1 == false)) {\n      activeMode = (activeMode == R1_MODE) ? NONE : R1_MODE;\n      if (activeMode == R1_MODE) {\n        intaketop.spin(forward, 100, percent);\n        intakebottom.spin(forward, 100, percent);\n        intakemiddle.spin(forward, 100, percent);\n        storage.stop();\n      }\n      else {\n        intakebottom.stop();\n        intakemiddle.stop();\n        intaketop.stop();\n      }\n    } \n    ////lower center goal scoring\n    if ((currr2 == true) && (prevr2 == false)) {\n      activeMode = (activeMode == R2_MODE) ? NONE : R2_MODE;\n      if (activeMode == R2_MODE) {\n        storage.spin(forward, 100, percent);\n        intakebottom.spin(reverse, 100, percent);\n        intakemiddle.spin(reverse, 100, percent);\n        intaketop.spin(reverse, 100, percent);\n      }\n      else {\n        intakebottom.stop();\n        storage.stop();\n        intakemiddle.stop();\n        intaketop.stop();\n      }\n    } \n    //storage forward\n    if ((currdown == true) && (prevdown == false)) {\n      activeMode = (activeMode == DOWN_MODE) ? NONE : DOWN_MODE;\n      if (activeMode == DOWN_MODE) {\n        storage.spin(forward, 100, percent);\n      }\n      else {\n        storage.stop();\n      }\n    } \n    //storage backwards\n    if ((currright == true) && (prevright == false)) {\n      activeMode = (activeMode == RIGHT_MODE) ? NONE : RIGHT_MODE;\n      if (activeMode == RIGHT_MODE) {\n        storage.spin(reverse, 100, percent);\n      }\n      else {\n        storage.stop();\n      }\n    } \n\n \n\n \n\n \n\n    // update previous button states\n    preva = curra;\n    prevb = currb;\n    prevr1 = currr1;\n    prevr2 = currr2;\n    // prevl1 = currl1;\n    // prevx = currx;\n    prevy = curry;\n    prevdown = currdown;\n    prevright = currright;\n \n\n    // pneumatic control\n    if (Controller1.ButtonL1.pressing()) {\n      loaderthing.set(false);\n    } else if (Controller1.ButtonL2.pressing()) {\n      loaderthing.set(true);\n    }\n\n    wait(20, msec);\n  }\n\n}\n\n ","textLanguage":"cpp","robotConfig":[],"slot":4,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.62.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"aiVisionSettings":{"colors":[],"codes":[],"tags":true,"AIObjects":true,"AIObjectModel":[],"aiModelDropDownValue":null}}